gerar_vetor <- function(a, b, c) {
accepted <- FALSE
while (!accepted) {
Yx <- rexp(1, rate = 1)
Yy <- rexp(1, rate = 1)
Yz <- rexp(1, rate = 1)
U <- runif(1)
razao <- exp(-(a * Yx * Yy + b * Yx * Yz + c * Yy * Yz))
if (U < razao) {
accepted <- TRUE
return(c(Yx, Yy, Yz))
}
}
}
# parâmetros
a <- 1
b <- 1
c <- 1
n <- 10000
matriz_simulacao <- matrix(NA, nrow = n, ncol = 3)
tentativas <- 0
# simulação
for (i in 1:n) {
tentativa_atual <- 0
aceito <- FALSE
while (!aceito) { #aq estava accepted_once
tentativa_atual <- tentativa_atual + 1
Yx_cand <- rexp(1, rate = 1)
Yy_cand <- rexp(1, rate = 1)
Yz_cand <- rexp(1, rate = 1)
U_cand <- runif(1)
val_razao <- exp(-(a * Yx_cand * Yy_cand + b * Yx_cand * Yz_cand + c * Yy_cand * Yz_cand))
if (U_cand < val_razao) {
matriz_simulacao[i, ] <- c(Yx_cand, Yy_cand, Yz_cand)
aceito <- TRUE
}
}
tentativas <- tentativas + tentativa_atual
}
amostraX <- matriz_simulacao[, 1]
amostraY <- matriz_simulacao[, 2]
amostraZ <- matriz_simulacao[, 3]
esperancaX <- mean(amostraX)
XYZ <- amostraX * amostraY * amostraZ
esperancaXYZ <- mean(XYZ)
erropX <- sd(amostraX)/sqrt(n)
erropXYZ <- sd(XYZ)/sqrt(n)
eficiencia <- n/tentativas
library(knitr)
resultados <- data.frame(
Medida = c("Número de amostras simuladas",
"Eficiência do método de Aceitação-Rejeição",
"Estimativa de E[X]",
"Erro Padrão de E[X]",
"Estimativa de E[XYZ]",
"Erro Padrão de E[XYZ]"),
Valor = c(n,
round(eficiencia, 4),
round(esperancaX, 4),
round(erropX, 4),
round(esperancaXYZ, 4),
round(erropXYZ, 4))
)
kable(resultados, caption = "Simulação Monte Carlo (a=b=c=1)")
resultados <- data.frame(
Medida = c("Número de amostras simuladas",
"Eficiência do método de Aceitação-Rejeição",
"Estimativa de E[X]",
"Erro Padrão de E[X]",
"Estimativa de E[XYZ]",
"Erro Padrão de E[XYZ]"),
Valor = c(n,
eficiencia,
esperancaX,
erropX,
esperancaXYZ,
erropXYZ)
)
kable(resultados, caption = "Simulação Monte Carlo (a=b=c=1)")
install.packages("BDSA")
libraary(knitr)
library(knitr)
testez <- function(x, mu0, sigma, m = 10000) {
n <- length(x)
ep_mu <- sigma / sqrt(n)
z_obs <- (mean(x) - mu0) / ep_mu
xbarra_estrela <- rnorm(m, mean = mu0, sd = ep_mu)
# estatística para cada média simulada
z_estrela <- (xbarra_estrela - mu0) / ep_mu
pvalor_mc <- sum(abs(z_estrela) >= abs(z_obs)) / m
return(list(
z_obs = z_obs,
pvalor_mc = pvalor_mc
))
}
library(BDSA) # função z.test
install.packages("BDSA")
install.packages("BDSA")
install.packages("TeachingDemos")
testez <- function(x, mu0, sigma, m = 10000) {
n <- length(x)
ep_mu <- sigma / sqrt(n)
z_obs <- (mean(x) - mu0) / ep_mu
xbarra_estrela <- rnorm(m, mean = mu0, sd = ep_mu)
# estatística para cada média simulada
z_estrela <- (xbarra_estrela - mu0) / ep_mu
pvalor_mc <- sum(abs(z_estrela) >= abs(z_obs)) / m
return(list(
z_obs = z_obs,
pvalor_mc = pvalor_mc
))
}
library(TeachingDemos) # função z.test
n <- 30
sigma <- 5
mu0 <- 10
mu1 <- 11.5
alfa <- 0.05
m <- 10000
rejeicoes_mc <- numeric(m)
rejeicoes_norm <- numeric(m)
set.seed(2023032088)
for (i in 1:m) {
x_amostra <- rnorm(n, mean = mu1, sd = sigma)
resultado_mc <- testez(x_amostra, mu0 = mu0, sigma = sigma, m = m)
if (resultado_mc$pvalor_mc < alfa) {
rejeicoes_mc[i] <- 1
}
resultado_norm <- z.test(x_amostra, mu = mu0, sigma.x = sigma,
alternative = "two.sided")
if (resultado_norm$p_valor_norm < alfa) {
rejeicoes_norm[i] <- 1
}
}
testez <- function(x, mu0, sigma, m = 10000) {
n <- length(x)
ep_mu <- sigma / sqrt(n)
z_obs <- (mean(x) - mu0) / ep_mu
xbarra_estrela <- rnorm(m, mean = mu0, sd = ep_mu)
# estatística para cada média simulada
z_estrela <- (xbarra_estrela - mu0) / ep_mu
pvalor_mc <- sum(abs(z_estrela) >= abs(z_obs)) / m
return(list(
z_obs = z_obs,
pvalor_mc = pvalor_mc
))
}
library(TeachingDemos) # função z.test
n <- 30
sigma <- 5
mu0 <- 10
mu1 <- 11.5
alfa <- 0.05
m <- 10000
rejeicoes_mc <- numeric(m)
rejeicoes_norm <- numeric(m)
set.seed(2023032088)
for (i in 1:m) {
x_amostra <- rnorm(n, mean = mu1, sd = sigma)
resultado_mc <- testez(x_amostra, mu0 = mu0, sigma = sigma, m = m)
if (resultado_mc$pvalor_mc < alfa) {
rejeicoes_mc[i] <- 1
}
resultado_norm <- z.test(x_amostra, mu = mu0, stdev = sigma,
alternative = "two.sided")
if (resultado_norm$p_valor_norm < alfa) {
rejeicoes_norm[i] <- 1
}
}
resultado_norm <- z.test(x_amostra, mu = mu0, stdev = sigma,
alternative = "two.sided")
View(resultado_norm)
resultado_norm$p.value
testez <- function(x, mu0, sigma, m = 10000) {
n <- length(x)
ep_mu <- sigma / sqrt(n)
z_obs <- (mean(x) - mu0) / ep_mu
xbarra_estrela <- rnorm(m, mean = mu0, sd = ep_mu)
# estatística para cada média simulada
z_estrela <- (xbarra_estrela - mu0) / ep_mu
pvalor_mc <- sum(abs(z_estrela) >= abs(z_obs)) / m
return(list(
z_obs = z_obs,
pvalor_mc = pvalor_mc
))
}
library(TeachingDemos) # função z.test
n <- 30
sigma <- 5
mu0 <- 10
mu1 <- 11.5
alpha <- 0.05
m <- 10000
rejeicoes_mc <- numeric(m)
rejeicoes_norm <- numeric(m)
set.seed(2023032088)
for (i in 1:m) {
x_amostra <- rnorm(n, mean = mu1, sd = sigma)
resultado_mc <- testez(x_amostra, mu0 = mu0, sigma = sigma, m = m)
if (resultado_mc$pvalor_mc < alpha) {
rejeicoes_mc[i] <- 1
}
resultado_norm <- z.test(x_amostra, mu = mu0, stdev = sigma,
alternative = "two.sided")
if (resultado_norm$p.value < alpha) {
rejeicoes_norm[i] <- 1
}
}
poder_mc <- mean(rejeicoes_mc)
poder_norm <- mean(rejeicoes_norm)
ep_poder_mc <- sqrt(poder_mc * (1 - poder_mc) / m)
ep_poder_norm <- sqrt(poder_norm * (1 - poder_norm) / m)
tabela <- data.frame(
Teste = c("THMC (Monte Carlo)", "Normal Analítico (Z-Test)"),
Poder_Estimado = c(poder_mc, poder_norm),
Erro_Padrao_MC = c(se_poder_mc, se_poder_norm)
)
poder_mc <- mean(rejeicoes_mc)
poder_norm <- mean(rejeicoes_norm)
ep_poder_mc <- sqrt(poder_mc * (1 - poder_mc) / m)
ep_poder_norm <- sqrt(poder_norm * (1 - poder_norm) / m)
tabela <- data.frame(
Teste = c("THMC (Monte Carlo)", "Normal Analítico (Z-Test)"),
Poder_Estimado = c(poder_mc, poder_norm),
Erro_Padrao_MC = c(ep_poder_mc, ep_poder_norm)
)
kable(tabela, caption = "Comparação do Poder de Teste (mu real = 11.5)")
